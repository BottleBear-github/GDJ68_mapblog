<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.gdj68.mapblog.feed.FeedDAO">
  
  
  	<!-- SEARCH -->
  	<sql id = "searchSql">
		<choose>
			<when test="kind=='id'">
				AND U.ID LIKE '%'||#{search}||'%'
			</when>
			<when test="kind=='title'">
				AND U.TITLE LIKE '%'||#{search}||'%'
			</when>
			<otherwise>
				AND U.CONTENTS LIKE '%'||#{search}||'%'
			</otherwise>
		</choose>
  	</sql>
  	
  	<!-- 개인 URL -->
  	<select id="getUrl" parameterType="FeedDTO" resultType="FeedDTO">
  		SELECT M.URL
  		  FROM FEED F, MEMBER M
  		 WHERE F.ID = M.ID
  	</select>
  	
  	<select id="getUser" parameterType="FeedDTO" resultType="MemberDTO">
  		SELECT ID
  		  FROM MEMBER
  		 WHERE URL = #{url}
  	</select>
  	

  	<!-- LIST -->
  	<!-- 
  	<select id="getList" parameterType="Pager" resultType="FeedDTO">
  		SELECT FEEDNUM, ID, TITLE, CONTENTS, CREATEDATE, TRIPDATE, HIT, LIKES FROM
  			(SELECT ROWNUM R, F.* FROM
  				(
  					SELECT * FROM FEED
  					
  					<include refid="searchSql"></include>
  					
  					ORDER BY FEEDNUM DESC
  				) F
  			)
  		WHERE R BETWEEN #{startRow} AND #{lastRow}
  	</select>
  	 -->
  	 
  	 <select id="getList2" parameterType="MemberDTO" resultType="FeedDTO">
  	 	SELECT *
  	 	  FROM FEED
  	 	 WHERE ID = #{id}
  	 </select>
  	  
	<select id="getList" parameterType="Pager" resultType="FeedDTO">
	SELECT TOTALCOUNT - RNUMS + 1 AS RNUM
	     , FEED.*
	  FROM (
	        SELECT ROW_NUMBER() OVER(ORDER BY U.FEEDNUM DESC) RNUMS
	             , COUNT(*) OVER() TOTALCOUNT
	             , U.FEEDNUM
	             , U.ID
	             , U.TITLE
	             , U.CONTENTS
	             , U.CREATEDATE
	             , U.TRIPDATE
	             , U.HIT
	             , U.LAT
	             , U.LNG
	             , (SELECT COUNT(*)
	                  FROM LIKES
	                 WHERE FEEDNUM = U.FEEDNUM) AS LIKES
	          FROM (SELECT FEEDNUM
	                     , ID
	                     , TITLE
	                     , CONTENTS
	                     , CREATEDATE
	                     , TRIPDATE
	                     , HIT
	                     , LAT
	                     , LNG
	                  FROM FEED
	                 WHERE PUBLICS = 0
	                UNION ALL
	                SELECT FEEDNUM
	                     , ID
	                     , TITLE
	                     , CONTENTS
	                     , CREATEDATE
	                     , TRIPDATE
	                     , HIT
	                     , LAT
	                     , LNG
	                  FROM FEED F
	                     , FOLLOW W
	                 WHERE F.PUBLICS = 1
	                   AND (F.ID = W.FROMUSER OR F.ID = W.TOUSER)
	                UNION ALL
	                SELECT F.FEEDNUM
	                     , F.ID
	                     , F.TITLE
	                     , F.CONTENTS
	                     , F.CREATEDATE
	                     , F.TRIPDATE
	                     , F.HIT
	                     , F.LAT
	                     , F.LNG
	                  FROM FEED F
	                 WHERE F.PUBLICS = 2
	                   AND F.ID = #{id}
	               ) U
	             , MEMBER M
	         WHERE U.ID = M.ID --MEMBER에 존재하는 ID와 JOIN
	         <include refid="searchSql"></include>
	       ) FEED
	 WHERE RNUMS BETWEEN #{startRow} AND #{lastRow}
	</select>


 	
  	<!-- PAGER (GET TOTAL) -->
	<select id="getTotal" resultType="Long" parameterType="Pager">
	 SELECT COUNT(FEEDNUM)
	   FROM FEED U
	   WHERE 1 = 1
		<include refid="searchSql"></include>
	</select>
	
	
	<!-- GET SEQUENCE -->
	<select id="getSequence" resultType="Long">
  		SELECT FEED_SEQ.NEXTVAL FROM DUAL
  	</select>
	

	<!-- ADD -->
	<insert id="setAdd" parameterType="FeedDTO">
		
		<selectKey keyProperty="feedNum" resultType="Long" order="BEFORE">
			SELECT FEED_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		
		INSERT INTO FEED
		VALUES (#{feedNum}, #{id}, #{title}, #{contents}, SYSDATE, #{tripDate}, 0, 0, #{publics}, #{lat}, #{lng})
		
	</insert>
	
	
	<!-- Delete -->
	<delete id="setDelete" parameterType="FeedDTO">
		DELETE FEED WHERE FEEDNUM = #{feedNum}
	</delete>
	

	<!-- Update -->
	<update id="setUpdate" parameterType="FeedDTO">
		UPDATE FEED SET
		TITLE = #{title},
		CONTENTS = #{contents},
		TRIPDATE = #{tripDate},
		PUBLICS = #{publics},
		LAT = #{lat},
		LNG = #{lng}
		WHERE FEEDNUM = #{feedNum}	
	</update>
	
	
	<!-- Detail -->
	<select id="getDetail" resultMap="getDetailResult" parameterType="FeedDTO">
	SELECT F.FEEDNUM
	    , F.ID
	    , F.TITLE
	    , F.CONTENTS
	    , F.CREATEDATE
	    , F.TRIPDATE
	    , F.HIT
	    , (SELECT COUNT(*)
	         FROM LIKES
	        WHERE FEEDNUM = F.FEEDNUM) AS LIKES
	    , F.PUBLICS
	    , F.LAT
	    , F.LNG
	    , FF.FILENUM
	    , FF.ORIGINALNAME
	    , FF.FILENAME
	  FROM FEED F
	     , FEEDFILE FF
	 WHERE F.FEEDNUM = FF.FEEDNUM(+)
	 			<!-- left outer join 이라는 뜻 -->
	   AND F.FEEDNUM = #{feedNum}
	</select>
	
  	<resultMap type="FeedDTO" id="getDetailResult">
  		<id column="FEEDNUM" property="feedNum"/>
  		<result column="ID" property="id"/>
  		<result column="TITLE" property="title"/>
  		<result column="CONTENTS" property="contents"/>
  		<result column="CREATEDATE" property="createDate"/>
  		<result column="TRIPDATE" property="tripDate"/>
  		<result column="HIT" property="hit"/>
  		<result column="LIKES" property="likes"/>
  		<result column="PUBLICS" property="publics"/>
  		<result column="LAT" property="lat"/>
  		<result column="LNG" property="lng"/>
  		
  		<collection property="dtos" javaType="List" ofType="FeedFileDTO">
  			<id column="FILENUM" property="fileNum"/>
  			<result column="ORIGINALNAME" property="originalName"/>
  			<result column="FILENAME" property="fileName"/>
  		</collection>
  	</resultMap>
	
	
	<!-- FILE ************************ -->
	
	<!-- FILE LIST -->
	<select id="getFileList" resultType="FeedFileDTO" parameterType="FeedDTO">
		SELECT * FROM FEED
		WHERE FEEDNUM = #{feedNum}
	</select>
	
	<!-- FILE ADD -->
  	<insert id="setFileAdd" parameterType="FeedFileDTO">
  		INSERT INTO FEEDFILE (FILENUM, FEEDNUM, ORIGINALNAME, FILENAME)
  		VALUES (FEEDFILE_SEQ.NEXTVAL, #{feedNum}, #{originalName}, #{fileName})
  	</insert>
  	
  	<!-- FILE DELETE -->
  	<delete id="setFileDelete" parameterType="FeedFileDTO">
  		DELETE FEEDFILE WHERE FILENUM=#{fileNum}
  	</delete>
  	
  	<!-- FILE DETAIL -->
	<select id="getFileDetail" parameterType="FeedFileDTO" resultType="FeedFileDTO">
  		SELECT FILENUM, FILENAME, ORIGINALNAME FROM FEEDFILE WHERE FILENUM=#{fileNum}
  	</select>
  	
  	
  	<!-- 조회수 ************************* -->
  	<update id="setHitUpdate" parameterType="feedDTO">
  		UPDATE FEED
  		SET HIT = HIT + 1
  		WHERE FEEDNUM = #{feedNum}
  	</update>
  	
  	
  	<!-- 좋아요 ************************* -->
  	
  	<!-- 좋아요 클릭 여부 -->
	<select id="getFindLikes" resultType="Long">
		SELECT COUNT(*) FROM LIKES WHERE ID=#{id} AND FEEDNUM=#{feedNum}
	</select>

	<!-- 좋아요 체크 -->
	<select id="checkLikes" parameterType="LikesDTO" resultType="Integer">
	SELECT COUNT(*)
	  FROM LIKES
	 WHERE FEEDNUM = #{feedNum}
	   AND ID = #{id}
	</select>

	<!-- 좋아요 등록 -->
	<insert id="addLikes" parameterType="LikesDTO">
	INSERT INTO LIKES (LIKESNUM, ID, FEEDNUM)
	VALUES (LIKES_SEQ.NEXTVAL, #{id}, #{feedNum})
	</insert>

	<!-- 좋아요 카운트 -->
	<select id="countLikes" parameterType="LikesDTO" resultType="Integer">
	 SELECT COUNT(*)
	  FROM LIKES
	 WHERE FEEDNUM = #{feedNum}
	</select>
	
	<!-- 좋아요 취소 -->
	<delete id="deleteLikes" parameterType="LikesDTO">
	DELETE LIKES WHERE ID = #{id} AND FEEDNUM = #{feedNum}
	</delete>
	
	<!-- 좋아요 리스트 카운트 -->
	<!-- (paging 처리를 위해) -->
	<select id="getLikesCount" parameterType="Pager" resultType="Long">
	SELECT COUNT(*)
	  FROM (
	        SELECT ROW_NUMBER() OVER(ORDER BY F.FEEDNUM DESC) RNUMS
	             , COUNT(*) OVER() TOTALCOUNT
	             , F.FEEDNUM
	             , F.ID
	             , F.TITLE
	             , F.CONTENTS
	             , F.CREATEDATE
	             , F.TRIPDATE
	             , F.HIT
	             , (SELECT COUNT(*)
	                  FROM LIKES
	                 WHERE FEEDNUM = F.FEEDNUM) AS LIKES
	             , F.PUBLICS
	             , F.LAT
	             , F.LNG
	          FROM (SELECT FEEDNUM
	                     , ID
	                     , TITLE
	                     , CONTENTS
	                     , CREATEDATE
	                     , TRIPDATE
	                     , HIT
	                     , PUBLICS
	                     , LAT
	                     , LNG
	                  FROM FEED
	                 WHERE PUBLICS = 0
	                UNION ALL
	                SELECT F.FEEDNUM
	                     , F.ID
	                     , F.TITLE
	                     , F.CONTENTS
	                     , F.CREATEDATE
	                     , F.TRIPDATE
	                     , F.HIT
	                     , PUBLICS
	                     , LAT
	                     , LNG
	                  FROM FEED F
	                 WHERE F.PUBLICS = 2
	                   AND F.ID = #{id}
	               ) F
	             , MEMBER M
	             , LIKES L
	         WHERE F.ID = M.ID --MEMBER에 존재하는 ID와 JOIN
	           AND F.FEEDNUM = L.FEEDNUM
	           AND L.ID = #{id}
	       ) FEED
	</select>

	<!-- 누른 좋아요 리스트 -->
	<select id="getLikesList" parameterType="Pager" resultType="FeedDTO">
	SELECT TOTALCOUNT - RNUMS + 1 AS RNUM
	     , FEED.*
	  FROM (
	        SELECT ROW_NUMBER() OVER(ORDER BY F.FEEDNUM DESC) RNUMS
	             , COUNT(*) OVER() TOTALCOUNT
	             , F.FEEDNUM
	             , F.ID
	             , F.TITLE
	             , F.CONTENTS
	             , F.CREATEDATE
	             , F.TRIPDATE
	             , F.HIT
	             , (SELECT COUNT(*)
	                  FROM LIKES
	                 WHERE FEEDNUM = F.FEEDNUM) AS LIKES
	             , F.PUBLICS
	             , F.LAT
	             , F.LNG
	          FROM (SELECT FEEDNUM
	                     , ID
	                     , TITLE
	                     , CONTENTS
	                     , CREATEDATE
	                     , TRIPDATE
	                     , HIT
	                     , PUBLICS
	                     , LAT
	                     , LNG
	                  FROM FEED
	                 WHERE PUBLICS = 0
	                UNION ALL
	                SELECT F.FEEDNUM
	                     , F.ID
	                     , F.TITLE
	                     , F.CONTENTS
	                     , F.CREATEDATE
	                     , F.TRIPDATE
	                     , F.HIT
	                     , PUBLICS
	                     , F.LAT
	                     , F.LNG
	                  FROM FEED F
	                 WHERE F.PUBLICS = 2
	                   AND F.ID = #{id}
	               ) F
	             , MEMBER M
	             , LIKES L
	         WHERE F.ID = M.ID --MEMBER에 존재하는 ID와 JOIN
	           AND F.FEEDNUM = L.FEEDNUM
	           AND L.ID = #{id}
	       ) FEED
	 WHERE RNUMS BETWEEN #{startRow} AND #{lastRow}
	</select>
	
	
	<!-- 댓글 ************************* -->
  	<!-- Comment -->
  	
  	<select id="getCommentList" parameterType="FeedCommentDTO" resultType="FeedCommentDTO">
  		SELECT * FROM FEEDCOMMENT
  		WHERE FEEDNUM = #{feedNum}
  	</select>
  	
	<insert id="setAddComment" parameterType="FeedCommentDTO">
	INSERT INTO FEEDCOMMENT(COMMENTNUM, FEEDNUM, ID, CONTENTS, COMMENTDATE)
	VALUES(FEEDCOMMENT_SEQ.NEXTVAL, #{feedNum}, #{id}, #{contents}, SYSDATE, 0, #{feedNum}, 0)
	</insert>
	
	<delete id="setDeleteComment" parameterType="FeedCommentDTO">
	DELETE FEEDCOMMENT
	 WHERE COMMENTNUM = #{commentNum}
	</delete>

	<update id="setUpdateComment" parameterType="FeedCommentDTO">
		UPDATE FEEDCOMMENT SET
		CONTENTS = #{contents}
			 WHERE COMMENTNUM = #{commentNum}
	</update>
 	

	<!-- 댓글 좋아요 -->
	<!-- 댓글 좋아요 클릭 여부 -->
	
	<!-- <select id="getFindCommentLikes" resultType="Long">
		SELECT COUNT(*) FROM FEEDCOMMENTLIKES WHERE ID=#{id} AND FEEDNUM=#{feedNum} AND COMMENTNUM=#{commentNum}
	</select>

	댓글 좋아요 체크
	<select id="checkCommentLikes" parameterType="FeedCommentLikesDTO" resultType="Integer">
	SELECT COUNT(*)
	  FROM FEEDCOMMENTLIKES
	 WHERE FEEDNUM = #{feedNum}
	   AND ID = #{id}
	   AND COMMENTNUM=#{commentNum}
	</select>

	댓글 좋아요 등록
	<insert id="addCommentLikes" parameterType="FeedCommentLikesDTO">
	INSERT INTO FEEDCOMMENTLIKES (LIKESNUM, ID, FEEDNUM, COMMENTNUM)
	VALUES (FEEDCOMMENTLIKES_SEQ.NEXTVAL, #{id}, #{feedNum}, #{commentNum})
	</insert>

	댓글 좋아요 카운트
	<select id="countCommentLikes" parameterType="FeedCommentLikesDTO" resultType="Integer">
	SELECT COUNT(*)
	  FROM FEEDCOMMENTLIKES
	 WHERE FEEDNUM=#{feedNum} AND COMMENTNUM=#{commentNum}
	</select>
	
	댓글 좋아요 취소
	<delete id="deleteCommentLikes" parameterType="FeedCommentLikesDTO">
	DELETE FEEDCOMMENTLIKES WHERE ID=#{id} AND FEEDNUM=#{feedNum} AND COMMENTNUM=#{commentNum}
	</delete> -->

  </mapper>